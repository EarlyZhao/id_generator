// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/id_rpc/unique_id.proto

package id_rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BusinessType struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BusinessType) Reset()         { *m = BusinessType{} }
func (m *BusinessType) String() string { return proto.CompactTextString(m) }
func (*BusinessType) ProtoMessage()    {}
func (*BusinessType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93253b6b5491e7, []int{0}
}

func (m *BusinessType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BusinessType.Unmarshal(m, b)
}
func (m *BusinessType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BusinessType.Marshal(b, m, deterministic)
}
func (m *BusinessType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BusinessType.Merge(m, src)
}
func (m *BusinessType) XXX_Size() int {
	return xxx_messageInfo_BusinessType.Size(m)
}
func (m *BusinessType) XXX_DiscardUnknown() {
	xxx_messageInfo_BusinessType.DiscardUnknown(m)
}

var xxx_messageInfo_BusinessType proto.InternalMessageInfo

func (m *BusinessType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UniqueId struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BusinessType         string   `protobuf:"bytes,2,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UniqueId) Reset()         { *m = UniqueId{} }
func (m *UniqueId) String() string { return proto.CompactTextString(m) }
func (*UniqueId) ProtoMessage()    {}
func (*UniqueId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93253b6b5491e7, []int{1}
}

func (m *UniqueId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UniqueId.Unmarshal(m, b)
}
func (m *UniqueId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UniqueId.Marshal(b, m, deterministic)
}
func (m *UniqueId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UniqueId.Merge(m, src)
}
func (m *UniqueId) XXX_Size() int {
	return xxx_messageInfo_UniqueId.Size(m)
}
func (m *UniqueId) XXX_DiscardUnknown() {
	xxx_messageInfo_UniqueId.DiscardUnknown(m)
}

var xxx_messageInfo_UniqueId proto.InternalMessageInfo

func (m *UniqueId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UniqueId) GetBusinessType() string {
	if m != nil {
		return m.BusinessType
	}
	return ""
}

func init() {
	proto.RegisterType((*BusinessType)(nil), "id_rpc.BusinessType")
	proto.RegisterType((*UniqueId)(nil), "id_rpc.UniqueId")
}

func init() { proto.RegisterFile("grpc/id_rpc/unique_id.proto", fileDescriptor_2b93253b6b5491e7) }

var fileDescriptor_2b93253b6b5491e7 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x2f, 0x2a, 0x48,
	0xd6, 0xcf, 0x4c, 0x89, 0x07, 0x51, 0xa5, 0x79, 0x99, 0x85, 0xa5, 0xa9, 0xf1, 0x99, 0x29, 0x7a,
	0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x71, 0x25, 0x25, 0x2e, 0x1e, 0xa7, 0xd2, 0xe2,
	0xcc, 0xbc, 0xd4, 0xe2, 0xe2, 0x90, 0xca, 0x82, 0x54, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc,
	0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0xc9, 0x9e, 0x8b, 0x23, 0x14, 0xac,
	0xdd, 0x33, 0x45, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x05, 0x2c, 0xcb, 0x12, 0xc4, 0x94, 0x99, 0x22,
	0xa4, 0xcc, 0xc5, 0x9b, 0x04, 0xd5, 0x1f, 0x5f, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0x04, 0xd6, 0xc8,
	0x93, 0x84, 0x64, 0xa8, 0x91, 0x37, 0x17, 0x3f, 0xcc, 0x80, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4,
	0x54, 0x21, 0x0b, 0x2e, 0x1e, 0xdf, 0xc4, 0xec, 0x54, 0xb8, 0xb9, 0x22, 0x7a, 0x10, 0x07, 0xe9,
	0x21, 0xbb, 0x46, 0x4a, 0x00, 0x26, 0x0a, 0x53, 0xa7, 0xc4, 0x90, 0xc4, 0x06, 0xf6, 0x80, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xc5, 0x37, 0x3e, 0xdf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UniqueIdServiceClient is the client API for UniqueIdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UniqueIdServiceClient interface {
	MakeUniqueId(ctx context.Context, in *BusinessType, opts ...grpc.CallOption) (*UniqueId, error)
}

type uniqueIdServiceClient struct {
	cc *grpc.ClientConn
}

func NewUniqueIdServiceClient(cc *grpc.ClientConn) UniqueIdServiceClient {
	return &uniqueIdServiceClient{cc}
}

func (c *uniqueIdServiceClient) MakeUniqueId(ctx context.Context, in *BusinessType, opts ...grpc.CallOption) (*UniqueId, error) {
	out := new(UniqueId)
	err := c.cc.Invoke(ctx, "/id_rpc.UniqueIdService/MakeUniqueId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniqueIdServiceServer is the server API for UniqueIdService service.
type UniqueIdServiceServer interface {
	MakeUniqueId(context.Context, *BusinessType) (*UniqueId, error)
}

func RegisterUniqueIdServiceServer(s *grpc.Server, srv UniqueIdServiceServer) {
	s.RegisterService(&_UniqueIdService_serviceDesc, srv)
}

func _UniqueIdService_MakeUniqueId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniqueIdServiceServer).MakeUniqueId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/id_rpc.UniqueIdService/MakeUniqueId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniqueIdServiceServer).MakeUniqueId(ctx, req.(*BusinessType))
	}
	return interceptor(ctx, in, info, handler)
}

var _UniqueIdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "id_rpc.UniqueIdService",
	HandlerType: (*UniqueIdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeUniqueId",
			Handler:    _UniqueIdService_MakeUniqueId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/id_rpc/unique_id.proto",
}
